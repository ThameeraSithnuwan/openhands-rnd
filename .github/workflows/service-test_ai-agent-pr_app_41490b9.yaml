name: service-test_ai-agent-pr_app_41490b9 Pipeline (Skyu Generated)
'on':
  issues:
    types:
      - labeled
    paths-ignore:
      - .github/workflows/**
      - .trivyignore
      - Readme.md
      - README.md
  pull_request:
    types:
      - labeled
  issue_comment:
    types:
      - created
    paths-ignore:
      - .github/workflows/**
      - .trivyignore
      - Readme.md
      - README.md
  pull_request_review_comment:
    types:
      - created
    paths-ignore:
      - .github/workflows/**
      - .trivyignore
      - Readme.md
      - README.md
  pull_request_review:
    types:
      - submitted
    paths-ignore:
      - .github/workflows/**
      - .trivyignore
      - Readme.md
      - README.md
  workflow_dispatch: {}
  repository_dispatch:
    types: pipeline_506159ca-acc7-4c5b-87d2-352a2efc424a
env:
  ENCODED_PIPELINE_SECRET: ${{secrets.OPENHANDSRND_SERVICETEST_AIAGENTPR_APP_41490B9}}
  COMMIT_ID: ${{github.event.client_payload.commitId || github.sha || github.run_id}}
  BRANCH_NAME: >-
    ${{github.event.client_payload.branchName || github.event.branch ||
    github.ref_name}}
jobs:
  _status-pending:
    name: _status-pending
    steps:
      - name: 'Run :: Start'
        run: |2-

              echo " Starting GitHub Action!" && 
              echo "STEPS_CAN_PROCEED=true" >> $GITHUB_ENV
              
      - name: 'Run :: Checkout repository'
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: 'Run :: Checkout Specific Commit'
        env:
          COMMIT_ID: ${{ github.event.client_payload.commitId }}
          BRANCH_NAME: ${{ github.event.client_payload.branchName }}
        if: >-
          ${{ github.event.client_payload.commitId != null ||
          github.event.client_payload.branchName != null }}
        run: |2-

              echo "Starting the checkout process..."
              git fetch --all
              if [ -n "$COMMIT_ID" ]; then
                echo "Commit ID provided: $COMMIT_ID"
                git checkout $COMMIT_ID || true
                echo "Checked out to commit ID: $COMMIT_ID"
              elif [ -n "$BRANCH_NAME" ]; then
                echo "Branch name provided: $BRANCH_NAME"
                git checkout $BRANCH_NAME || true
                echo "Checked out to branch: $BRANCH_NAME"

                #Updating the commit Id
                ACTUAL_COMMIT_ID=$(git rev-parse HEAD)
                echo "Changing CommitId: $ACTUAL_COMMIT_ID"
                echo "COMMIT_ID=$ACTUAL_COMMIT_ID" >> $GITHUB_ENV
              else
                echo "Skipping checkout..."
              fi
            
      - name: 'Run :: Decoding Secrets'
        run: |2-

                if [ ! -x "$(command -v jq)" ]; then
                  echo "jq not found, installing..."
                  sudo apt-get update
                  sudo apt-get install -y jq
                fi
                echo "${{ env.ENCODED_PIPELINE_SECRET }}" | base64 --decode | jq -r 'to_entries[] | "\(.key)=\(.value)"' | while read line; do echo "$line" >> $GITHUB_ENV; echo "::add-mask::${line#*=}"; done
                
      - name: 'Run :: Checkout repository'
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: 'Run :: Pipeline Started'
        env:
          RUN_ID: ${{ github.run_id }}
        run: |2-

              context=$(echo "$CONTEXT_JSON" | jq --arg sha "$COMMIT_ID" '.sha = $sha' | jq -c . | base64)
              response=$(curl -X PUT -d "runId=$RUN_ID&context=$context&appId=${{ github.event.client_payload.externalRepo.appId }}"  -H 'Authorization: ${{ env.SERVICE_ACC_ACCESS_TOKEN }}' -H 'x-organization-id: ${{ env.PIPELINE_ORGANIZATION_ID }}' -H 'x-project-id: ${{ env.PIPELINE_PROJECT_ID }}' -H 'x-environment-id: ${{ env.PIPELINE_ENVIRONMENT_ID }}' -H 'x-trace-id: ${{ env.PIPELINE_TRACE_ID }}' -H 'x-auth-by: sa' -H 'Content-Type: application/x-www-form-urlencoded'  "${{ env.PIPELINE_SERVICE_EP }}/${{ env.PIPELINE_ID }}/PENDING?releaseId=${{ github.event.client_payload.releaseData.releaseId }}")
              if echo "$response" | grep -q '"success":true'; then
                echo "SUCCESS :: $response"
              else
                echo "FAILED :: $response"
              fi
              
    needs: []
    permissions: write-all
    env:
      CONTEXT_JSON: ${{ toJson(github) }}
    runs-on: ubuntu-latest
  ai-agent-fix:
    name: AI Agent Fix
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          
      - name: Get latest versions and create requirements.txt
        run: |
          python -m pip index versions openhands-ai > openhands_versions.txt
          OPENHANDS_VERSION=$(head -n 1 openhands_versions.txt | awk '{print $2}' | tr -d '()')

          # Create a new requirements.txt locally within the workflow, ensuring no reference to the repo's file
          echo "openhands-ai==${OPENHANDS_VERSION}" > /tmp/requirements.txt
          cat /tmp/requirements.txt
      - name: Cache pip dependencies
        if: |
          !(
            github.event.label.name == 'fix-me-experimental' ||
            (
              (github.event_name == 'issue_comment' || github.event_name == 'pull_request_review_comment') &&
              contains(github.event.comment.body, '@openhands-agent-exp')
            ) ||
            (
              github.event_name == 'pull_request_review' &&
              contains(github.event.review.body, '@openhands-agent-exp')
            )
          )
        uses: actions/cache@v4
        with:
          path: ${{ env.pythonLocation }}/lib/python3.12/site-packages/*
          key: ${{ runner.os }}-pip-openhands-resolver-${{ hashFiles('/tmp/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-openhands-resolver-${{ hashFiles('/tmp/requirements.txt') }}  
            
      - name: Check required environment variables
        env:
          LLM_MODEL: 'anthropic/claude-3-5-sonnet-20241022'
          LLM_API_KEY: ${{ secrets.OPENHANDSRND_SKYUAIAGENTPR_LLM_API }}
          LLM_BASE_URL: ''
          LLM_API_VERSION: ''
          PAT_TOKEN: ${{ secrets.OPENHANDSRND_SKYUAIAGENTPR_PAT_TOKEN }}
          PAT_USERNAME: 'ThameeraSithnuwan'
          GITHUB_TOKEN: ${{ github.token }}
        run: |
          required_vars=("LLM_API_KEY")
          for var in "${required_vars[@]}"; do
            if [ -z "${!var}" ]; then
              echo "Error: Required environment variable $var is not set."
              exit 1
            fi
          done

          # Check optional variables and warn about fallbacks
          if [ -z "$LLM_BASE_URL" ]; then
            echo "Warning: LLM_BASE_URL is not set, will use default API endpoint"
          fi

          if [ -z "$PAT_TOKEN" ]; then
            echo "Warning: PAT_TOKEN is not set, falling back to GITHUB_TOKEN"
          fi

          if [ -z "$PAT_USERNAME" ]; then
            echo "Warning: PAT_USERNAME is not set, will use openhands-agent"
          fi        
          
      - name: Set environment variables
        env:
          REVIEW_BODY: ${{ github.event.review.body || '' }}
        run: |
          # Handle pull request events first
          if [ -n "${{ github.event.pull_request.number }}" ]; then
            echo "ISSUE_NUMBER=${{ github.event.pull_request.number }}" >> $GITHUB_ENV
            echo "ISSUE_TYPE=pr" >> $GITHUB_ENV
          # Handle pull request review events
          elif [ -n "$REVIEW_BODY" ]; then
            echo "ISSUE_NUMBER=${{ github.event.pull_request.number }}" >> $GITHUB_ENV
            echo "ISSUE_TYPE=pr" >> $GITHUB_ENV
          # Handle issue comment events that reference a PR
          elif [ -n "${{ github.event.issue.pull_request }}" ]; then
            echo "ISSUE_NUMBER=${{ github.event.issue.number }}" >> $GITHUB_ENV
            echo "ISSUE_TYPE=pr" >> $GITHUB_ENV
          # Handle regular issue events
          else
            echo "ISSUE_NUMBER=${{ github.event.issue.number }}" >> $GITHUB_ENV
            echo "ISSUE_TYPE=issue" >> $GITHUB_ENV
          fi

          if [ -n "$REVIEW_BODY" ]; then
            echo "COMMENT_ID=${{ github.event.review.id || 'None' }}" >> $GITHUB_ENV
          else
            echo "COMMENT_ID=${{ github.event.comment.id || 'None' }}" >> $GITHUB_ENV
          fi

          echo "MAX_ITERATIONS=${{ 50 }}" >> $GITHUB_ENV
          echo "SANDBOX_ENV_GITHUB_TOKEN=${{ secrets.OPENHANDSRND_SKYUAIAGENTPR_PAT_TOKEN }}" >> $GITHUB_ENV
          echo "SANDBOX_ENV_BASE_CONTAINER_IMAGE=${{ '' }}" >> $GITHUB_ENV

          # Set branch variables
          echo "TARGET_BRANCH=main" >> $GITHUB_ENV      
          
      - name: Comment on issue with start message
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.OPENHANDSRND_SKYUAIAGENTPR_PAT_TOKEN }}
          script: |
            const issueType = process.env.ISSUE_TYPE;
            github.rest.issues.createComment({
              issue_number: ${{ env.ISSUE_NUMBER }},
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `[OpenHands](https://github.com/All-Hands-AI/OpenHands) started fixing the ${issueType}! You can monitor the progress [here](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}).`
            });
            
      - name: Install OpenHands
        id: install_openhands
        uses: actions/github-script@v7
        env:
          COMMENT_BODY: ${{ github.event.comment.body || '' }}
          REVIEW_BODY: ${{ github.event.review.body || '' }}
          LABEL_NAME: ${{ github.event.label.name || '' }}
          EVENT_NAME: ${{ github.event_name }}
        with:
          script: |
            const commentBody = process.env.COMMENT_BODY.trim();
            const reviewBody = process.env.REVIEW_BODY.trim();
            const labelName = process.env.LABEL_NAME.trim();
            const eventName = process.env.EVENT_NAME.trim();
            // Check conditions
            const isExperimentalLabel = labelName === "fix-me-experimental";
            const isIssueCommentExperimental =
              (eventName === "issue_comment" || eventName === "pull_request_review_comment") &&
              commentBody.includes("@openhands-agent-exp");
            const isReviewCommentExperimental =
              eventName === "pull_request_review" && reviewBody.includes("@openhands-agent-exp");

            // Set output variable
            core.setOutput('isExperimental', isExperimentalLabel || isIssueCommentExperimental || isReviewCommentExperimental);

            // Perform package installation
            if (isExperimentalLabel || isIssueCommentExperimental || isReviewCommentExperimental) {
              console.log("Installing experimental OpenHands...");
              await exec.exec("python -m pip install --upgrade pip");
              await exec.exec("pip install git+https://github.com/all-hands-ai/openhands.git");
            } else {
              console.log("Installing from requirements.txt...");
              await exec.exec("python -m pip install --upgrade pip");
              await exec.exec("pip install -r /tmp/requirements.txt");
            }
            
      - name: Attempt to resolve issue
        env:
          GITHUB_TOKEN: ${{ secrets.OPENHANDSRND_SKYUAIAGENTPR_PAT_TOKEN }}
          GITHUB_USERNAME: ThameeraSithnuwan
          GIT_USERNAME: ThameeraSithnuwan
          LLM_MODEL: anthropic/claude-3-5-sonnet-20241022
          LLM_API_KEY: ${{ secrets.OPENHANDSRND_SKYUAIAGENTPR_LLM_API }}
          LLM_BASE_URL: ""
          LLM_API_VERSION: ""
          PYTHONPATH: ""
        run: |
          cd /tmp && python -m openhands.resolver.resolve_issue \
            --selected-repo ${{ github.repository }} \
            --issue-number ${{ env.ISSUE_NUMBER }} \
            --issue-type ${{ env.ISSUE_TYPE }} \
            --max-iterations ${{ env.MAX_ITERATIONS }} \
            --comment-id ${{ env.COMMENT_ID }} \
            --is-experimental ${{ steps.install_openhands.outputs.isExperimental }}        
    permissions:
      contents: write
      pull-requests: write
      issues: write
    needs:
      - _status-pending
  _status-success:
    name: _status-success
    steps:
      - name: 'Run :: Start'
        run: |2-

              echo " Starting GitHub Action!" && 
              echo "STEPS_CAN_PROCEED=true" >> $GITHUB_ENV
              
      - name: 'Run :: Checkout repository'
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: 'Run :: Checkout Specific Commit'
        env:
          COMMIT_ID: ${{ github.event.client_payload.commitId }}
          BRANCH_NAME: ${{ github.event.client_payload.branchName }}
        if: >-
          ${{ github.event.client_payload.commitId != null ||
          github.event.client_payload.branchName != null }}
        run: |2-

              echo "Starting the checkout process..."
              git fetch --all
              if [ -n "$COMMIT_ID" ]; then
                echo "Commit ID provided: $COMMIT_ID"
                git checkout $COMMIT_ID || true
                echo "Checked out to commit ID: $COMMIT_ID"
              elif [ -n "$BRANCH_NAME" ]; then
                echo "Branch name provided: $BRANCH_NAME"
                git checkout $BRANCH_NAME || true
                echo "Checked out to branch: $BRANCH_NAME"

                #Updating the commit Id
                ACTUAL_COMMIT_ID=$(git rev-parse HEAD)
                echo "Changing CommitId: $ACTUAL_COMMIT_ID"
                echo "COMMIT_ID=$ACTUAL_COMMIT_ID" >> $GITHUB_ENV
              else
                echo "Skipping checkout..."
              fi
            
      - name: 'Run :: Decoding Secrets'
        run: |2-

                if [ ! -x "$(command -v jq)" ]; then
                  echo "jq not found, installing..."
                  sudo apt-get update
                  sudo apt-get install -y jq
                fi
                echo "${{ env.ENCODED_PIPELINE_SECRET }}" | base64 --decode | jq -r 'to_entries[] | "\(.key)=\(.value)"' | while read line; do echo "$line" >> $GITHUB_ENV; echo "::add-mask::${line#*=}"; done
                
      - name: 'Run :: Pipeline Success'
        env:
          RUN_ID: ${{ github.run_id }}
        run: |2-

              context=$(echo "$CONTEXT_JSON" | jq --arg sha "$COMMIT_ID" '.sha = $sha' | jq -c . | base64)
              response=$(curl -X PUT -d "runId=$RUN_ID&context=$context&appId=${{ github.event.client_payload.externalRepo.appId }}"  -H 'Authorization: ${{ env.SERVICE_ACC_ACCESS_TOKEN }}' -H 'x-organization-id: ${{ env.PIPELINE_ORGANIZATION_ID }}' -H 'x-project-id: ${{ env.PIPELINE_PROJECT_ID }}' -H 'x-environment-id: ${{ env.PIPELINE_ENVIRONMENT_ID }}' -H 'x-trace-id: ${{ env.PIPELINE_TRACE_ID }}' -H 'x-auth-by: sa' -H 'Content-Type: application/x-www-form-urlencoded'  "${{ env.PIPELINE_SERVICE_EP }}/${{ env.PIPELINE_ID }}/SUCCESS?releaseId=${{ github.event.client_payload.releaseData.releaseId }}")
              
    needs:
      - ai-agent-fix
    permissions: write-all
    if: ${{ !(failure() || cancelled()) }}
    env:
      CONTEXT_JSON: ${{ toJson(github) }}
    runs-on: ubuntu-latest
  _status-failed:
    name: _status-failed
    steps:
      - name: 'Run :: Decoding Secrets'
        run: |2-

                if [ ! -x "$(command -v jq)" ]; then
                  echo "jq not found, installing..."
                  sudo apt-get update
                  sudo apt-get install -y jq
                fi
                echo "${{ env.ENCODED_PIPELINE_SECRET }}" | base64 --decode | jq -r 'to_entries[] | "\(.key)=\(.value)"' | while read line; do echo "$line" >> $GITHUB_ENV; echo "::add-mask::${line#*=}"; done
                
      - name: 'Run :: Pipeline Failed'
        env:
          RUN_ID: ${{ github.run_id }}
        run: |2-

              context=$(echo "$CONTEXT_JSON" | jq --arg sha "$COMMIT_ID" '.sha = $sha' | jq -c . | base64)
              response=$(curl -X PUT -d "runId=$RUN_ID&context=$context&appId=${{ github.event.client_payload.externalRepo.appId }}"  -H 'Authorization: ${{ env.SERVICE_ACC_ACCESS_TOKEN }}' -H 'x-organization-id: ${{ env.PIPELINE_ORGANIZATION_ID }}' -H 'x-project-id: ${{ env.PIPELINE_PROJECT_ID }}' -H 'x-environment-id: ${{ env.PIPELINE_ENVIRONMENT_ID }}' -H 'x-trace-id: ${{ env.PIPELINE_TRACE_ID }}' -H 'x-auth-by: sa' -H 'Content-Type: application/x-www-form-urlencoded'  "${{ env.PIPELINE_SERVICE_EP }}/${{ env.PIPELINE_ID }}/FAILED?releaseId=${{ github.event.client_payload.releaseData.releaseId }}")

              # Triggering SkyU Alerts
              response=$(curl -X POST -d "labels[alertname]=pipelineFailed&labels[pipelineId]=${{ env.PIPELINE_ID }}&labels[system]=skyu&message=Pipeline Failed&messageTitle=Pipeline ${{ env.PIPELINE_ID }} Failed&status=firing"  -H 'Content-Type: application/x-www-form-urlencoded'  "${{ env.FIRE_SKYU_ALERT_EP }}?organizationId=${{ env.PIPELINE_ORGANIZATION_ID }}&projectId=${{ env.PIPELINE_PROJECT_ID }}&environmentId=${{ env.PIPELINE_ENVIRONMENT_ID }}&token=${{ env.SERVICE_ACC_ACCESS_TOKEN_STRIPPED }}&authBy=sa")

              if echo "$response" | grep -q '"success":true'; then
                echo "SUCCESS :: $response"
              else
                echo "FAILED :: $response"
              fi
              
    needs:
      - ai-agent-fix
    permissions: write-all
    if: ${{ failure() || cancelled() }}
    env:
      CONTEXT_JSON: ${{ toJson(github) }}
    runs-on: ubuntu-latest
